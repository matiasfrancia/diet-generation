from __future__ import annotations
import logging
from typing import List, Optional

import pandas as pd

from project_fitness_adri.config.settings import get_settings
from project_fitness_adri.diet.meals_plan_llm import MealsPlanLLM
from project_fitness_adri.diet.types import MealsPlan
from project_fitness_adri.user.types import DietType
from project_fitness_adri.user.user import User
from project_fitness_adri.utils.io import _load_food_database

settings = get_settings()
log = logging.getLogger(__name__)

class MealsPlanGenerator:
    """
    Receives the data of the person that needs a meals plan (user)
    and generates it for they.
    """
    def __init__(self, user: User) -> "MealsPlanGenerator":
        self.user: User = user
        self.food_db: pd.DataFrame = _load_food_database()
        self.generator = MealsPlanLLM(self.user)

        # TODO: uncomment this when we generate a vector space to filter foods
        # self.food_db_filtered = self._filter_db_by_constraints(
        #     self.food_db, 
        #     diet_type = user.data.diet_type,
        #     allergens = user.data.condition
        # )


    def select_meals_plan_from_pool(self) -> MealsPlan:
        """
        Selects a meals plan template taking the best fit from a pool with 
        different generated plans. To select it it uses the macros and the 
        basic user information.
        """
        pass

    
    def _filter_db_by_constraints(
        df: pd.DataFrame,
        *,
        diet: DietType,
        allergens: Optional[List[str]] = None,
    ) -> pd.DataFrame:
        if diet == "vegan":
            df = df[df["is_vegan"] == 1]
        elif diet == "vegetarian":
            df = df[df["is_vegetarian"] == 1]

        if allergens:
            allergens_pattern = "|".join(allergens)
            # TODO: make stronger filtering, not just by name, we must have the allergens
            # in the database, as a column
            df = df[~df["name"].str.contains(allergens_pattern, case=False, na=False)]

        return df


    def generate(self) -> MealsPlan:
        """
        Uses the macros defined for the user to generate a meals plan for the user.
        It does it by calling to OpenAI's API with LangChain.

        This method should be called just in dev stage to generate the
        initial meals plans' database.

        If the LLM gives meals with foods that aren't in the db, we use that food
        as a query in the FatSecret API, and add it to the database.
        """
        # use LLM to generate a meals plan
        meals_plan: MealsPlan = self.generator.generate_with_openai()
        log.info(f"The following Meals Plan was generated for the user: \n{meals_plan}")
        
        # if there's any food that it's not in the db, add it (FoodDatabaseGenerator)
        
        # check if it meets the constraints and requirements for allergens and 
        # dietary constraints
        
        # if it doesn't meet the requirements add it explicitly to the prompt and 
        # call again


    def check_hard_constraints_meals_plan(self, meals_plan: MealsPlan) -> bool:
        """
        Checks if the meals plan generated by the LLM complies with the allergens
        requirements, as well as the dietary type of the user (vegan, vegetarian).
        """


    def check_macros_meals_plan(
        self, 
        meals_plan: MealsPlan, 
        threshold: float = 0.05
    ) -> bool:
        """
        Checks whether a meals plan meets the macros' constraints, 
        returns True if the meals plan complies with the macros with
        an error of less of the threshold, else returns False.
        """
